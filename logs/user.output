[34m***************[ Default constructor test ]***************[0m
[32mTesting empty list int: [0m
list size is: 0

[34m***************[ Fill constructor test ]***************[0m
[32mTesting list<int> lst1(10, 42): [0m
42 | 42 | 42 | 42 | 42 | 42 | 42 | 42 | 42 | 42 | 


[34m***************[ Range constructor test ]***************[0m
0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 


[34m***************[ Copy constructor test ]***************[0m
[32mMaking copy list<int> lst4(lst1): [0m
42 | 42 | 42 | 42 | 42 | 42 | 42 | 42 | 42 | 42 | 

[34m***************[ Operator = test ]***************[0m
[32mMaking list<int> lst5 = lst1: [0m
4 | 4 | 4 | 4 | 4 | 4 | 4 | 4 | 4 | 4 | 


[34m***************[ Iterators test (char) ]***************[0m
[32mlist contents, using iterator: [0m
0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 

[32mlist contents in reverse, using the reverse iterator: [0m
9 8 7 6 5 4 3 2 1 0 
[32mTesting arithmetic operations on iterator: [0m
it value: 0
it++ value: 1
it-- value: 0
++it value: 1
--it value: 0
[32mTesting arithmetic operations on reverse iterator: [0m
itr value: 9
itr++ value: 8
itr-- value: 9
++itr value: 8
--itr value: 9
[32mTesting iterator comparison: [0m
it == ite: 0
it == it: 1
it != ite: 1
ite != ite: 0
[32mTesting reverse iterator comparison: [0m
rit == rite: 1
rit == rit: 1
rit != rite: 0
rite != rite: 0

[34m***************[ Const iterators test (char) ]***************[0m
[32mlist contents, using iterator: [0m
0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 

[32mTesting iterator comparison: [0m
it == ite: 0
it == it: 1
it != ite: 1
ite != ite: 0
[34m***************[ empty() test (int) ]***************[0m
[32mEmpty list: [0m
is_empty: 1
size: 0
[32mAfter push_back 10 elements: [0m
is_empty: 0
1. size: 10
0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 

[32mAfter inserting 10 elements: [0m
2. size: 20
[32mAfter popback(): [0m
3. size: 19

0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 

[32mAfter push_front(666): [0m
size: 20

list contents: 
Printing in reverse order: 
100 100 100 100 100 100 100 100 100 9 8 7 6 5 4 3 2 1 0 666 0 1 2 3 4 [32mAfter popfront(): [0m
4. size: 24
list contents: 
3 | 2 | 1 | 0 | 666 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 100 | 

[34m***************[ max_size() and size() test (int) ]***************[0m
[32mTaking the same list: [0m
size: 24
max_size: 768614336404564650

[34m***************[ front() function (int) ]***************[0m
mylist.front() is now 55
[34m***************[ back() function (int) ]***************[0m
mylist contains: 10 | 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 | 

[34m***************[ assign() test (int) ]***************[0m
[32massign 7 ints with the value of 100 [0m
list contents: 
100 | 100 | 100 | 100 | 100 | 100 | 100 | 

[32massign 5 central values of first[0m
list contents: 
100 | 100 | 100 | 100 | 100 | 100 | 100 | 

[32mcreating array of ints {1776, 7, 4} and assigning from it: [0m
list contents: 
1776 | 7 | 4 | 

Size of first: 7
Size of second: 7
Size of third: 3

[34m***************[ push_front() and pop_front() test (int) ]***************[0m
[32mAfter push_front(666): [0m
size: 11

list contents: 
666 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 

list contents: 
4 | 3 | 2 | 1 | 0 | 666 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 

[32mAfter popfront(): [0m
size: 15
list contents: 
3 | 2 | 1 | 0 | 666 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 

[34m***************[ push_back() and pop_back() test (float) ]***************[0m
list contents: 
1.23 | 2.34 | 3.45 | 4.55 | 5.56 | 

[32mcalling pop_back() 2 times: [0m
list contents: 
1.23 | 2.34 | 3.45 | 

list in reverse: 
3.45 | 2.34 | 1.23 | 

[34m***************[ insert test (int) ]***************[0m
list contents: 
0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 

[32minsert 1 element at 2nd position with the value of 666 [0m
list contents: 
0 | 1 | 666 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 

list size: 11
[32minsert 5 element at 5th position with the value of 55 [0m
list contents: 
0 | 1 | 666 | 55 | 55 | 55 | 55 | 55 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 

list size: 16
[32minsert range of elements int arr[] = {501,502,503} at the begin() + 1[0m
501 | 502 | 503 | 0 | 1 | 666 | 55 | 55 | 55 | 55 | 55 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 

list in reverse: 
9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 55 | 55 | 55 | 55 | 55 | 666 | 1 | 0 | 503 | 502 | 501 | 

list size: 19
[34m***************[ erase test (int) ]***************[0m
[32merase the 6th element: [0m
502 | 503 | 0 | 1 | 666 | 55 | 55 | 55 | 55 | 55 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 

list size: 18
[32merase the first 3 elements: [0m
502 | 503 | 0 | 1 | 666 | 55 | 55 | 55 | 55 | 55 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 

list size: 18
[34m***************[ swap() test (string) ]***************[0m
list vs1 contents: 
chto | kak | sunshine | ? | 

list vs2 contents: 
prosto | sdelai | it | 

[32mafter swapping values : [0m
list vs1 contents: 
prosto | sdelai | it | 

list vs2 contents: 
chto | kak | sunshine | ? | 

[34m***************[ resize() test (int) ]***************[0m
[32mmyints.resize(5): [0m
3 | 2 | 1 | 0 | 666 | 

[32mmyints.resize(8, 100): [0m
3 | 2 | 1 | 0 | 666 | 100 | 100 | 100 | 

[32mmyints.resize(12): [0m
3 | 2 | 1 | 0 | 666 | 100 | 100 | 100 | 0 | 0 | 0 | 0 | 


[34m***************[ erase test (int) ]***************[0m
[32merase the first element: [0m
2 | 1 | 0 | 666 | 100 | 100 | 100 | 0 | 0 | 0 | 0 | 

list size: 11

[32merase the first 3 elements: [0m
2
666
666 | 100 | 100 | 100 | 0 | 0 | 0 | 0 | 

list size: 8
size: 0
is_empty: 1
[34m***************[ clear() test (string) ]***************[0m
[32mInitial list contents : [0m
prosto | sdelai | it | 

list size: 3
[32mlist contents after clear() : [0m


list size: 0
[34m***************[ splice() test (int) ]***************[0m
mylist1 contents: 
1 | 2 | 3 | 4 | 

mylist1 size: 4
mylist2 contents: 
10 | 20 | 30 | 

mylist2 size: 3
[32mSPLICE (entire list) mylist2 to mylist1 at the 1st position:[0m		
[33m'it' still points to: [0m		
2
[33mmylist1 after splicing mylist2 to it at 1st position:[0m		
1 | 10 | 20 | 30 | 2 | 3 | 4 | 

mylist1 size: 7
[33mmylist2 after being spliced to mylist1 at 1st position:[0m		


mylist2 size: 0
[32mSPLICE (single) mylist2 to mylist1 at the 1st position:[0m		
[33m'it' is invalid now[0m		
2
[33mmylist1 after splicing[0m		
1 | 10 | 20 | 30 | 3 | 4 | 

mylist1 size: 6
[33mmylist2 after splicing[0m		
2 | 

mylist2 size: 1
IT: 30
[32mSPLICE (elem range) mylist1 3 last elements to the begining:[0m		
mylist1 contains: 30 | 3 | 4 | 1 | 10 | 20 | 

mylist1 size: 6
mylist2 contains: 2 | 

mylist2 size: 1

[34m***************[ remove() test (int) ]***************[0m
[34m***************[ remove() test (int) ]***************[0m
mylist contents before removing: 
17 | 89 | 7 | 14 | 

list size before removing: 4
mylist contains: 
17 | 7 | 14 | 

list size: 3
[34m***************[ remove_if() test (int) ]***************[0m
SORT ::: 
1 | 4 | 7 | 15 | 17 | 20 | 36 | 39 | 

mylist contains: 20 | 36 | 

[34m***************[ unique() test (int) ]***************[0m
list before unique func: 
0 | 2.72 | 3.14 | 12.15 | 12.77 | 12.77 | 15.3 | 72.25 | 72.25 | 73 | 

mylist contains: 0 | 2.72 | 3.14 | 12.15 | 12.77 | 15.3 | 72.25 | 73 | 

mylist contains: 0 | 2.72 | 3.14 | 12.15 | 15.3 | 72.25 | 73 | 

mylist contains: 0 | 12.15 | 72.25 | 

mylist contains: a | g | p | 

mylist contains: a | g | p | 

first contains: 1.4 | 2.2 | 2.9 | 3.1 | 3.7 | 7.1 | 

secont contains: 

first contains: 1.4 | 2.2 | 2.9 | 2.1 | 3.1 | 3.7 | 7.1 | 

secont contains: 

[34m***************[ reverse() test (int) ]***************[0m
mylist contains: 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 


a and b are equal
b and c are not equal
b is less than c
c is greater than b
a is less than or equal to b
a is greater than or equal to b
foo contains: 200 | 200 | 200 | 200 | 200 | 

bar contains:100 | 100 | 100 | 

